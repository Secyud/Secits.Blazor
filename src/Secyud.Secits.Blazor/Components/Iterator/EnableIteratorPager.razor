@namespace Secyud.Secits.Blazor
@inherits SPluginBase<SIteratorBase<TValue>>
@typeparam TValue

@code
{
    public RenderFragment GenerateItems(RenderFragment<TValue> itemTemplate) => __builder =>
    {
        if (!_items.Any()) return;

        foreach (var item in _items)
        {
            @itemTemplate(item)
        }
    };

    public RenderFragment GenerateFooter() => __builder =>
    {
        var maxPageCount = _totalCount;
        <div class="pager-container">
            <SPager Class="pager" MaxPageCount="maxPageCount"
                    PageIndex="Master.DataRequest.PageIndex"
                    PageIndexChanged="PageIndexChangedAsync"/>


            @if (PageSizes is { Length: > 1 })
            {
                EnableDropDown? enableDropDown = null;

                <SInput TValue="int" Class="pager-selector">
                    <InputTextTemplate Class="w-100" Readonly
                                       @onclick="OnDropDownClickAsync"/>
                    <EnableValueInput Value="Master.DataRequest.PageSize"
                                      ValueChanged="PageSizeChangedAsync"
                                      ValueUpdated="OnCloseDropDownAsync"/>
                    <EnableDropDown @ref="enableDropDown">
                        <SList Class="outline" Style="max-height: calc(var(--s-s) * 16);">
                            <StaticDataSource Items="PageSizes"/>
                            <EnableIteratorVisualize/>
                            <EnableIteratorSelect/>
                            <ListColumn>
                                <div class="page-selector-item">
                                    @context
                                </div>
                            </ListColumn>
                        </SList>
                    </EnableDropDown>
                </SInput>

                async Task OnCloseDropDownAsync()
                {
                    if (enableDropDown is not null)
                        await enableDropDown.OnCloseDropDownAsync();
                }

                async Task OnDropDownClickAsync()
                {
                    if (enableDropDown is not null)
                        await enableDropDown.OnDropDownClickAsync();
                }
            }
        </div>
    };
}
