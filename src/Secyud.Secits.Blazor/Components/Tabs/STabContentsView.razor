@using Secyud.Secits.Blazor.Settings.Tabs
@namespace Secyud.Secits.Blazor

<div class="@GetClass()" style="@GetStyle()">
    @RenderTabContents(TabContainer)
</div>

@code {

    protected RenderFragment? RenderTabContents(STabContainer? container)
    {
        if (container is null) return null;

        var tabs = new List<ITab>();
        var key = container.CurrentKey;
        ITab? firstTab = null;
        foreach (var tabProvider in container.TabProviders)
        {
            foreach (var tab in tabProvider.GetTabs())
            {
                firstTab ??= tab;
                if (TabRenderMode.LoadAll == RenderMode || tab.Key == key)
                {
                    tab.IsRendered = true;
                    tabs.Add(tab);
                }
                else if (TabRenderMode.LazyLoad == RenderMode && tab.IsRendered)
                {
                    tabs.Add(tab);
                }
            }
        }

        if (key is null && !AllowEmptyContent && firstTab is not null)
        {
            key = firstTab.Key;
            container.SelectTabAsync(this, key).ConfigureAwait(false);
        }

        return __builder =>
        {
            foreach (var tab in tabs)
            {
                <div @key="@tab.Key" class="s-tab-content" id="tc-@tab.Key"
                     style="@(key == tab.Key ? "" : "display:none")">
                    @tab.RenderTabContent()
                </div>
            }
        };
    }

}