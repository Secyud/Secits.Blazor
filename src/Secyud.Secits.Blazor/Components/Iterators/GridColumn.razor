@namespace Secyud.Secits.Blazor
@inherits SPluginBase<SGrid<TValue>>
@typeparam TValue
@using System.Numerics
@typeparam TField

@code
{
    public virtual RenderFragment GenerateHeader() =>
        __builder =>
        {
            @if (EnableSorter)
            {
                <div class="header-cell" @onclick="SetSorterValueAsync">
                    @Caption
                    <SIcon Class="@GetSorterIconClass()"/>
                </div>
            }
            else
            {
                <div class="header-cell">
                    @Caption
                </div>
            }

            @if (EnableFilter)
            {
                <div class="header-filter">
                    @GenerateFilter()
                </div>
            }
        };

    protected virtual RenderFragment GenerateFilter() =>
        __builder =>
        {
            if (FilterTemplate is not null)
            {
                @FilterTemplate(Filter)
            }
            else
            {
                _columnFilter ??= GenerateDefaultFilter();
                @_columnFilter
            }
        };

    protected RenderFragment GenerateDefaultFilter()
    {
        
        
        @* var fieldType = typeof(TField); *@
        @* if (fieldType == typeof(string)) *@
        @* { *@
        @*     return __builder => *@
        @*     { *@
        @*         <SInput TValue="string"> *@
        @*             <EnableValueInput TValue="string" *@
        @*                               Value="@(Filter.FilterValue as string)" *@
        @*                               ValueChanged="@(v => SetFilterValueAsync(v))"/> *@
        @*             <InputTextTemplate/> *@
        @*         </SInput> *@
        @*     }; *@
        @* } *@
        @* *@
        @* if (IsNumberType(fieldType)) *@
        @* { *@
        @*     return GenerateNumberFilter<int>(Filter.FilterValue, SetFilterValueAsync); *@
        @* } *@

        @* if (IsDateTimeType(fieldType)) *@
        @* { *@
        @*     return __builder => *@
        @*     { *@
        @*         <SInput TValue="TField"> *@
        @*             <EnableValueInput *@
        @*                 Value="Filter.FilterValue" ValueChanged="@SetFilterValueAsync"/> *@
        @*             <InputTextTemplate/> *@
        @*             <EnableDropDown> *@
        @*                 $1$ dropdown content #1# *@
        @*             </EnableDropDown> *@
        @*         </SInput> *@
        @*     }; *@
        @* } *@

        return __builder => { };
    }


    public virtual RenderFragment GenerateColumn(TValue value) =>
        __builder =>
        {
            if (Field is null) return;
            var field = GetField(value);
            if (Format is null)
            {
                @field
            }
            else
            {
                @string.Format($"{{0:{Format}}}", field)
            }
        };

    public RenderFragment GenerateFooter() => __builder => { };
}
